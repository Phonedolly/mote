import Head from 'next/head'
import Image from 'next/image'
import { Noto_Sans_KR, Outfit } from 'next/font/google'
import { CurrentTitle, Dots, ExportButton, LastEdit, LeftTitleMenuContainer, PopupMenu, RightTitleMenuContainer, SideBar, SideBarToggleButton, Spacer, Title, TitleBar } from '@/components/basicElements'
import { Container, ContentContainer, } from '@/components/container'
import InputEntry from '@/components/InputEntry';
import { useEffect, useRef, useState } from 'react'
import { v4 } from "uuid";
import { useAnimate } from 'framer-motion'

export default function Home() {
  const refContentContainer = useRef(null);
  const [showSideBar, setShowSideBar] = useState(false);
  const [currentTitle, setCurrentTitle] = useState("Current Title");
  const [lastEdit, setLastEdit] = useState(new Date());
  const [dom, setDom] = useState({ rawData: [""], curLine: { value: 0, lastArrowAction: "" } });
  // const [curLine, setCurLine] = useState({ value: 0, lastAction: "" });
  const [caret, setCaret] = useState(1);

  // useEffect(() => {
  //   const { value, lastArrowAction } = dom.curLine;
  //   console.log(`curLine is changed to ${value}`)
  //   // document.getElementById('aa').
  //   if (lastArrowAction === "DOWN" || lastArrowAction === "ENTER") {
  //     refContentContainer.current.children[value].firstChild?.focus();
  //   }

  //   if (lastArrowAction === "UP") {
  //     console.log('value', value);
  //     const target = refContentContainer.current.childNodes[value].firstChild;
  //     const selection = window.getSelection();
  //     const range = document.createRange();
  //     // move caret to the end of the line
  //     range.setStart(target.childNodes[0], 2)
  //     range.collapse(true);

  //     selection.removeAllRanges();
  //     selection.addRange(range);

  //     target.focus();
  //     // select the range
  //     console.log('worked');
  //   }
  //   // refContentContainer.current.children[curLine].focus();
  // }, [dom]);

  // useEffect(() => {
  //   function handleKeydown(e) {
  //     if (e.key == "ArrowDown") {
  //       setCurLine(curLine + 1)
  //     }
  //     if (e.key == "ArrowUp") {
  //       setCurLine(curLine - 1)
  //     }
  //   }
  //   document.addEventListener("keydown", handleKeydown);

  //   return () => {
  //     document.removeEventListener("keydown", handleKeydown);
  //   }
  // }, [curLine])

  return (
    <>
      <Head key={v4()}>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container>
        <TitleBar>
          <LeftTitleMenuContainer>
            {showSideBar ? <SideBar /> : <SideBarToggleButton />}
            <CurrentTitle>{currentTitle}</CurrentTitle>
          </LeftTitleMenuContainer>
          <RightTitleMenuContainer>
            <LastEdit>{`${lastEdit.getMonth() + 1}월 ${lastEdit.getDate()}일에 마지막으로 편집`}</LastEdit>
            <ExportButton />
            <Dots />
          </RightTitleMenuContainer>
        </TitleBar>
        <ContentContainer ref={refContentContainer}>
          {dom.rawData.map((rawText, i) => {
            console.log('i', i, 'value', dom.curLine.value);
            if (i === dom.curLine.value) {
              return (
                <InputEntry
                  key={v4()}
                  dom={dom}
                  setDom={setDom}
                  caret={caret}
                  lineNo={i}>
                  {rawText}
                </InputEntry>)
            }
            return <div key={v4()} lineno={i} onClick={() => { setDom({ ...dom, curLine: { value: i, lastArrowAction: undefined } }) }}>{rawText.length === 0 ? <br /> : rawText}</div>;
          })}
        </ContentContainer>

      </Container>
    </>
  )
}
